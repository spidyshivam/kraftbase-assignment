# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database Service
  postgres_db:
    image: postgres:16-alpine
    container_name: food_delivery_postgres
    restart: always
    environment:
      POSTGRES_DB: postgres # This is the default database that gets created by the image
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d # Mounts our custom init scripts
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Restaurant Service
  restaurant_service:
    build:
      context: ./restaurant_service
      dockerfile: Dockerfile
    container_name: restaurant_service
    restart: on-failure
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgres://postgres:mysecretpassword@postgres_db:5432/restaurant_db
      DELIVERY_AGENT_SERVICE_URL: http://delivery_agent_service:8002
    depends_on:
      postgres_db:
        condition: service_healthy # Wait for postgres to be healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Delivery Agent Service
  delivery_agent_service:
    build:
      context: ./delivery_agent_service
      dockerfile: Dockerfile
    container_name: delivery_agent_service
    restart: on-failure
    ports:
      - "8002:8002"
    environment:
      DATABASE_URL: postgres://postgres:mysecretpassword@postgres_db:5432/delivery_db
      RESTAURANT_SERVICE_URL: http://restaurant_service:8001
    depends_on:
      postgres_db:
        condition: service_healthy # Wait for postgres to be healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service (GraphQL Gateway)
  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    container_name: user_service
    restart: on-failure
    ports:
      - "8000:8000"
    environment:
      RESTAURANT_SERVICE_URL: http://restaurant_service:8001
      DELIVERY_AGENT_SERVICE_URL: http://delivery_agent_service:8002
    depends_on:
      restaurant_service:
        condition: service_healthy # Wait for restaurant service to be healthy
      delivery_agent_service:
        condition: service_healthy # Wait for delivery agent service to be healthy
      postgres_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"] # Check if GraphQL Playground is accessible
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pg_data: # Define the named volume for PostgreSQL data persistence
